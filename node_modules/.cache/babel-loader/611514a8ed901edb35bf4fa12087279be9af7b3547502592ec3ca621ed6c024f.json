{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hasindu Rangika\\\\Desktop\\\\ReactAPP\\\\todolist\\\\React-Dictionary\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [inputValue, setInputValue] = useState(\"\");\n  const [searchedWords, setSearchedWords] = useState([]);\n  const [searchResult, setSearchResult] = useState([]);\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleSearchClick = async () => {\n    // Make sure the input value is not empty\n    if (!inputValue.trim()) {\n      return;\n    }\n\n    // Format the user input\n    const formattedInput = inputValue.trim().toLowerCase();\n\n    // Search for words in the data.txt file\n    try {\n      const response = await axios.get(\"/data.txt\");\n      const data = response.data.split(\"\\n\");\n      const matchingWords = data.filter(word => word.includes(formattedInput)).map(word => word.trim().toLowerCase());\n\n      // Sort the matching words so that the word line that includes the user input is displayed first\n      matchingWords.sort((a, b) => {\n        const aIndex = a.indexOf(formattedInput);\n        const bIndex = b.indexOf(formattedInput);\n        if (aIndex === bIndex) {\n          return 0;\n        }\n        if (aIndex === -1) {\n          return 1;\n        }\n        if (bIndex === -1) {\n          return -1;\n        }\n        return aIndex - bIndex;\n      });\n\n      // Set the state with the searched words and search results\n      setSearchedWords([...searchedWords, formattedInput]);\n      setSearchResult(matchingWords);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearchClick,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Searched Words:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), searchedWords.map(word => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: word\n      }, word, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Search Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), searchResult.length > 0 ? searchResult.map(word => /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontWeight: word === inputValue ? \"bold\" : \"normal\"\n        },\n        children: word\n      }, word, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No results found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"di3QLYH5wDDDPBfV0dnGGOZAOqk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","inputValue","setInputValue","searchedWords","setSearchedWords","searchResult","setSearchResult","handleInputChange","event","target","value","handleSearchClick","trim","formattedInput","toLowerCase","response","get","data","split","matchingWords","filter","word","includes","map","sort","a","b","aIndex","indexOf","bIndex","error","console","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","style","fontWeight","_c","$RefreshReg$"],"sources":["C:/Users/Hasindu Rangika/Desktop/ReactAPP/todolist/React-Dictionary/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [searchedWords, setSearchedWords] = useState([]);\n  const [searchResult, setSearchResult] = useState([]);\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleSearchClick = async () => {\n    // Make sure the input value is not empty\n    if (!inputValue.trim()) {\n      return;\n    }\n\n    // Format the user input\n    const formattedInput = inputValue.trim().toLowerCase();\n\n    // Search for words in the data.txt file\n    try {\n      const response = await axios.get(\"/data.txt\");\n      const data = response.data.split(\"\\n\");\n\n      const matchingWords = data\n        .filter((word) => word.includes(formattedInput))\n        .map((word) => word.trim().toLowerCase());\n\n      // Sort the matching words so that the word line that includes the user input is displayed first\n      matchingWords.sort((a, b) => {\n        const aIndex = a.indexOf(formattedInput);\n        const bIndex = b.indexOf(formattedInput);\n        if (aIndex === bIndex) {\n          return 0;\n        }\n        if (aIndex === -1) {\n          return 1;\n        }\n        if (bIndex === -1) {\n          return -1;\n        }\n        return aIndex - bIndex;\n      });\n\n      // Set the state with the searched words and search results\n      setSearchedWords([...searchedWords, formattedInput]);\n      setSearchResult(matchingWords);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n        <button onClick={handleSearchClick}>Search</button>\n      </div>\n      <div>\n        <h2>Searched Words:</h2>\n        {searchedWords.map((word) => (\n          <p key={word}>{word}</p>\n        ))}\n      </div>\n      <div>\n        <h2>Search Results:</h2>\n        {searchResult.length > 0 ? (\n          searchResult.map((word) => (\n            <p\n              key={word}\n              style={{ fontWeight: word === inputValue ? \"bold\" : \"normal\" }}\n            >\n              {word}\n            </p>\n          ))\n        ) : (\n          <p>No results found.</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}