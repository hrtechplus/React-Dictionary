{"ast":null,"code":"var _jsxFileName = \"D:\\\\React\\\\React-Dictionary\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [quote, setQuote] = useState(\"\");\n  const [author, setAuthor] = useState(\"\");\n  const [userMessage, setUserMessage] = useState(\"Enter Word to Search\");\n  const [definition, setDefinition] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    fetchQuote();\n  }, []);\n  const fetchQuote = async () => {\n    try {\n      const response = await fetch(\"https://api.quotable.io/random?maxLength=50\");\n      const {\n        content,\n        author\n      } = await response.json();\n      setQuote(content);\n      setAuthor(author);\n    } catch (error) {\n      console.error(\"Error fetching quote:\", error);\n    }\n  };\n  const handleSearch = async () => {\n    try {\n      const formattedTerm = searchTerm.trim().toLowerCase();\n      setDefinition(searchTerm);\n      const {\n        data\n      } = await axios.get(\"/data.txt\");\n      const lines = data.split(\"\\n\");\n      const filteredLines = lines.filter(line => line.toLowerCase().includes(formattedTerm));\n      if (filteredLines.length === 0) {\n        setUserMessage(`We couldn't find this Word or Re-try without 'S'`);\n        setDefinition(null);\n        setSearchResults([\"Click the Contribute Button below to add this word.\"]);\n      } else {\n        setUserMessage(\"Definitions of:\");\n        let firstMatchingLine = \"\";\n        for (const line of filteredLines) {\n          const [wordBeforeTab, ...definitions] = line.split(\"\\t\");\n          if (wordBeforeTab === formattedTerm) {\n            setUserMessage(\"Definition of:\");\n            firstMatchingLine = line;\n            break;\n          } else {\n            firstMatchingLine = `We haven't this word. But we can add it for you. Simply, click the \"Contribute\" button below`;\n          }\n        }\n        const index = filteredLines.indexOf(firstMatchingLine);\n        if (index !== 0) {\n          filteredLines.splice(0, 0, filteredLines.splice(index, 1)[0]);\n        }\n        setSearchResults(filteredLines);\n      }\n    } catch (error) {\n      console.error(\"Error fetching data:\", error);\n      setUserMessage(\"Error fetching data. Please try again later.\");\n    }\n  };\n\n  // ... other functions and rendering logic remains the same\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"mainDiv\",\n    className: \"container-md shadow-lg rounded-4 position-absolute top-50 start-50 translate-middle bg-white p-0 overflow-y-auto\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UHrrMazVeM+972Kh9UT/xBevQbU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","searchTerm","setSearchTerm","quote","setQuote","author","setAuthor","userMessage","setUserMessage","definition","setDefinition","searchResults","setSearchResults","fetchQuote","response","fetch","content","json","error","console","handleSearch","formattedTerm","trim","toLowerCase","data","get","lines","split","filteredLines","filter","line","includes","length","firstMatchingLine","wordBeforeTab","definitions","index","indexOf","splice","id","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/React/React-Dictionary/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n  const [quote, setQuote] = useState(\"\");\r\n  const [author, setAuthor] = useState(\"\");\r\n  const [userMessage, setUserMessage] = useState(\"Enter Word to Search\");\r\n  const [definition, setDefinition] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchQuote();\r\n  }, []);\r\n\r\n  const fetchQuote = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://api.quotable.io/random?maxLength=50\"\r\n      );\r\n      const { content, author } = await response.json();\r\n      setQuote(content);\r\n      setAuthor(author);\r\n    } catch (error) {\r\n      console.error(\"Error fetching quote:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    try {\r\n      const formattedTerm = searchTerm.trim().toLowerCase();\r\n      setDefinition(searchTerm);\r\n\r\n      const { data } = await axios.get(\"/data.txt\");\r\n      const lines = data.split(\"\\n\");\r\n      const filteredLines = lines.filter((line) =>\r\n        line.toLowerCase().includes(formattedTerm)\r\n      );\r\n\r\n      if (filteredLines.length === 0) {\r\n        setUserMessage(`We couldn't find this Word or Re-try without 'S'`);\r\n        setDefinition(null);\r\n        setSearchResults([\r\n          \"Click the Contribute Button below to add this word.\",\r\n        ]);\r\n      } else {\r\n        setUserMessage(\"Definitions of:\");\r\n        let firstMatchingLine = \"\";\r\n        for (const line of filteredLines) {\r\n          const [wordBeforeTab, ...definitions] = line.split(\"\\t\");\r\n          if (wordBeforeTab === formattedTerm) {\r\n            setUserMessage(\"Definition of:\");\r\n            firstMatchingLine = line;\r\n            break;\r\n          } else {\r\n            firstMatchingLine = `We haven't this word. But we can add it for you. Simply, click the \"Contribute\" button below`;\r\n          }\r\n        }\r\n\r\n        const index = filteredLines.indexOf(firstMatchingLine);\r\n        if (index !== 0) {\r\n          filteredLines.splice(0, 0, filteredLines.splice(index, 1)[0]);\r\n        }\r\n        setSearchResults(filteredLines);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching data:\", error);\r\n      setUserMessage(\"Error fetching data. Please try again later.\");\r\n    }\r\n  };\r\n\r\n  // ... other functions and rendering logic remains the same\r\n\r\n  return (\r\n    <div\r\n      id=\"mainDiv\"\r\n      className=\"container-md shadow-lg rounded-4 position-absolute top-50 start-50 translate-middle bg-white p-0 overflow-y-auto\"\r\n    >\r\n      {/* ... rest of the JSX content */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}